// <auto-generated />
using System;
using InterviewPass.DataAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewPass.DataAccess.Migrations
{
    [DbContext(typeof(InterviewPassContext))]
    [Migration("20250428105709_updatetbl")]
    partial class updatetbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("ExamId")
                        .HasColumnType("STRING");

                    b.Property<string>("GitHubLink")
                        .HasColumnType("STRING");

                    b.Property<byte[]>("ImageAnswer")
                        .HasColumnType("BLOB");

                    b.Property<bool?>("IsTrueSelected")
                        .HasColumnType("BOOLEAN");

                    b.Property<double?>("ObtainedScore")
                        .HasColumnType("DOUBLE");

                    b.Property<string>("QuestionId")
                        .HasColumnType("STRING");

                    b.Property<string>("ResultId")
                        .HasColumnType("STRING");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("STRING");

                    b.Property<string>("Type")
                        .HasColumnType("STRING");

                    b.Property<string>("UserId")
                        .HasColumnType("STRING");

                    b.Property<byte[]>("ZipAnswer")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("STRING");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("DeadLineInNbrOfDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("STRING");

                    b.Property<double?>("MaxScore")
                        .HasColumnType("DOUBLE");

                    b.Property<double?>("MinScore")
                        .HasColumnType("DOUBLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("NbrOfQuestion")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "Name" }, "IX_Exam_Name")
                        .IsUnique();

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Field", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Field_Name")
                        .IsUnique();

                    b.ToTable("Field", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Possibility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("Content")
                        .HasColumnType("STRING");

                    b.Property<bool?>("IsTheCorrectAnswer")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("QuestionId")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Possibilities");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("Content")
                        .HasColumnType("STRING");

                    b.Property<double?>("Score")
                        .HasColumnType("DOUBLE");

                    b.Property<string>("SkillId")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Question", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.QuestionExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdExam")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("IdQuestion")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("IdExam");

                    b.HasIndex("IdQuestion");

                    b.ToTable("QuestionExams");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Result", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<bool?>("CandidateSucceeded")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ExamId")
                        .HasColumnType("STRING");

                    b.Property<double?>("Score")
                        .HasColumnType("DOUBLE");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("STRING");

                    b.Property<string>("UserId")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.SelectedPossibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdAnswer")
                        .HasColumnType("STRING");

                    b.Property<string>("IdPossibility")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdPossibility");

                    b.ToTable("SelectedPossibilities");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FieldId")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex(new[] { "Name" }, "IX_Skill_Name")
                        .IsUnique();

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.SkillBySeeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobSeekerId")
                        .HasColumnType("STRING");

                    b.Property<string>("SkillId")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillBySeeker", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.UserHr", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("Company")
                        .HasColumnType("STRING");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .HasColumnType("STRING");

                    b.Property<string>("Login")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("STRING");

                    b.Property<string>("Phone")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Login" }, "IX_UserHr_Login")
                        .IsUnique();

                    b.ToTable("UserHr", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.UserJobSeeker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .HasColumnType("STRING");

                    b.Property<int?>("LevelOfExperience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_UserJobSeeker_Name")
                        .IsUnique();

                    b.ToTable("UserJobSeeker", (string)null);
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("InterviewPass.DataAccess.Entities.Question");

                    b.Property<bool?>("HasSignleChoice")
                        .HasColumnType("BOOLEAN");

                    b.HasDiscriminator().HasValue("MultipleChoice");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Questions.ObjectiveQuestion", b =>
                {
                    b.HasBaseType("InterviewPass.DataAccess.Entities.Question");

                    b.HasDiscriminator().HasValue("Objective");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Questions.PracticalQuestion", b =>
                {
                    b.HasBaseType("InterviewPass.DataAccess.Entities.Question");

                    b.HasDiscriminator().HasValue("Practical");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("InterviewPass.DataAccess.Entities.Question");

                    b.Property<bool?>("IsTrue")
                        .HasColumnType("BOOLEAN");

                    b.HasDiscriminator().HasValue("TrueFalse");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Answer", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Exam", "Exam")
                        .WithMany("Answers")
                        .HasForeignKey("ExamId");

                    b.HasOne("InterviewPass.DataAccess.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("InterviewPass.DataAccess.Entities.Result", "Result")
                        .WithMany("Answers")
                        .HasForeignKey("ResultId");

                    b.HasOne("InterviewPass.DataAccess.Entities.UserJobSeeker", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId");

                    b.Navigation("Exam");

                    b.Navigation("Question");

                    b.Navigation("Result");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Exam", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.UserHr", "CreatedByNavigation")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Possibility", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Question", "Question")
                        .WithMany("Possibilities")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Question", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Skill", "Skill")
                        .WithMany("Questions")
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.QuestionExam", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Exam", "IdExamNavigation")
                        .WithMany("QuestionExams")
                        .HasForeignKey("IdExam")
                        .IsRequired();

                    b.HasOne("InterviewPass.DataAccess.Entities.Question", "IdQuestionNavigation")
                        .WithMany("QuestionExams")
                        .HasForeignKey("IdQuestion")
                        .IsRequired();

                    b.Navigation("IdExamNavigation");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Result", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamId");

                    b.HasOne("InterviewPass.DataAccess.Entities.UserJobSeeker", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.SelectedPossibility", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Answer", "IdAnswerNavigation")
                        .WithMany("SelectedPossibilities")
                        .HasForeignKey("IdAnswer");

                    b.HasOne("InterviewPass.DataAccess.Entities.Possibility", "IdPossibilityNavigation")
                        .WithMany("SelectedPossibilities")
                        .HasForeignKey("IdPossibility");

                    b.Navigation("IdAnswerNavigation");

                    b.Navigation("IdPossibilityNavigation");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Skill", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.Field", "Field")
                        .WithMany("Skills")
                        .HasForeignKey("FieldId");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.SkillBySeeker", b =>
                {
                    b.HasOne("InterviewPass.DataAccess.Entities.UserJobSeeker", "JobSeeker")
                        .WithMany("SkillBySeekers")
                        .HasForeignKey("JobSeekerId");

                    b.HasOne("InterviewPass.DataAccess.Entities.Skill", "Skill")
                        .WithMany("SkillBySeekers")
                        .HasForeignKey("SkillId");

                    b.Navigation("JobSeeker");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Answer", b =>
                {
                    b.Navigation("SelectedPossibilities");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Exam", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionExams");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Field", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Possibility", b =>
                {
                    b.Navigation("SelectedPossibilities");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Possibilities");

                    b.Navigation("QuestionExams");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Result", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.Skill", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SkillBySeekers");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.UserHr", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("InterviewPass.DataAccess.Entities.UserJobSeeker", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Results");

                    b.Navigation("SkillBySeekers");
                });
#pragma warning restore 612, 618
        }
    }
}
